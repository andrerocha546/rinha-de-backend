name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.5

      - name: Run build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Create ECR Repository if it doesnt exists
        env:
          GIT_REGISTRY: ${{ github.repository }}
        run: aws ecr describe-repositories --repository-names $GIT_REGISTRY || aws ecr create-repository --repository-name $GIT_REGISTRY

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GIT_REGISTRY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$GIT_REGISTRY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$GIT_REGISTRY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$GIT_REGISTRY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#      - name: Trigger EC2 Terraform Workflow
#        env:
#          GITHUB_OWNER: ${{ github.event.actor.login }}
#          GITHUB_REPO: terraform
#          WORKFLOW_FILE: ec2_instance.yml
#          REPOSITORY_NAME: ${{ github.event.repository.name }}
#          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        run: curl -sSL "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/workflows/$WORKFLOW_FILE/dispatches" -H "Authorization: Bearer $PERSONAL_ACCESS_TOKEN" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" --data "{\"ref\":\"main\",\"inputs\":{}}"
#        uses: convictional/trigger-workflow-and-wait@v1.6.1
#        env:
#          GITHUB_OWNER: ${{ github.event.actor.login }}
#          GITHUB_REPO: terraform
#          REPOSITORY_NAME: ${{ github.event.repository.name }}
#          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        with:
#          owner: $GITHUB_OWNER
#          repo: $GITHUB_REPO
#          github_token: $PERSONAL_ACCESS_TOKEN
#          workflow_file_name: ec2_instance.yml
#          ref: main
#          propagate_failure: true
#          trigger_workflow: true
#          wait_workflow: true

#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true

  call-workflow-passing-data:
    uses: andrerocha546/terraform/.github/workflows/ec2_instance.yml@main
#    env:
#      GITHUB_OWNER: ${{ github.event.actor.login }}
#      GITHUB_REPO: terraform
#      WORKFLOW_FILE: ec2_instance.yml
#      REPOSITORY_NAME: ${{ github.event.repository.name }}
#      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    with:
      instance_name: ${{ github.event.repository.name }}
      subdomain: ${{ github.event.repository.name }}
    secrets: inherit
#      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      AWS_REGION: ${{ secrets.AWS_REGION }}
